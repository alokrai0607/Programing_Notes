
My Research about Spring & SpringBoot .

===> Spring and Spring Boot are popular frameworks in the Java ecosystem for building robust and scalable applications.

Structure of Spring framework : 
 =========================================================================================================================================
 Core Container ====>  AOP ====> Data Access/Integration ====> MVC ====> Security ====> Test ====> Messaging ====> Spring Boot Integration
 =========================================================================================================================================

1. core container : set of modules that provide the essential functionality and infrastructure for the framework.

     Beans: Manages objects (beans) in the application context.
	 
     Core: Provides fundamental parts of the framework, including the IoC (Inversion of Control) container.
	 
	 
2.  AOP (Aspect-Oriented Programming):

	Aspect: Allows separating cross-cutting concerns like logging, security, etc.
	
	Advice: Code implementing a concern.
	
3. Data Access/Integration:

    JDBC: Simplifies database access using JDBC.
	
    ORM (Object-Relational Mapping): Integrates with popular ORM frameworks like Hibernate.
	
    Transactions: Supports programmatic and declarative transactions.


4. Model-View-Controller (MVC):

      Web: Provides web development features and follows the MVC pattern.
	  
      Validation: Supports data validation.
	  
5. Security:

       Authentication & Authorization: Configurable security services.
       
	   Secure Communication: Supports secure communication using SSL.

6. Test:

       Unit Testing: Support for JUnit and TestNG.

       Mock Objects: Integration with mock object frameworks.

7. Messaging:

      JMS (Java Message Service): Supports messaging between distributed components.
      
	  WebSocket: Provides support for WebSocket communication.

8. Spring Boot Integration:

     Bootstrapping: Simplifies the process of setting up and running Spring applications.
	 
	 
	 
	 -------------------------------------------------------------------------------------------------
	 
	 Spring Boot:
	 
	 ===============================================================================================================================================================================
	 Auto-Configuration => Embedded Web Server => Starter Projects => Spring Boot Actuator => Spring Boot DevTools => Spring Boot Starters => Spring Boot CLI => 
	 Spring Boot Annotations==> Externalized Configuration => Spring Boot Testing => Spring Boot Production Deployment.
	 ===============================================================================================================================================================================
	 
    1. Auto-Configuration:

         Convention over Configuration: Automatically configures the application based on dependencies.

    2. Embedded Web Server:

         Tomcat, Jetty, or Undertow: Allows the application to be run as a standalone JAR.

    3. Starter Projects:

         Pre-configured Templates: Simplifies the setup of common application types (web, data, security, etc.).

    4. Spring Boot Actuator:

         Monitoring and Management: Includes built-in endpoints for monitoring and managing the application.

	5. Spring Boot DevTools:

        Developer Productivity: Tools for improving the development experience, like automatic application restart.

    6. Spring Boot Starters:

       Dependency Management: Simplifies the inclusion of dependencies in the project.

    7. Spring Boot CLI (Command Line Interface):

       Command-Line Development: Provides a command-line tool for creating and testing Spring Boot applications.

    8. Spring Boot Annotations:

        @SpringBootApplication: Main annotation to indicate the primary configuration class.
		
	    Spring Boot comes with a variety of annotations that simplify the development of Java applications. Here are some important Spring Boot annotations along with their uses:
		Use: Marks the primary configuration class.
         
		@SpringBootApplication
		Combines @Configuration, @EnableAutoConfiguration, and @ComponentScan.
		
		@RestController:
		Use: Indicates that the class is a RESTful controller. Combines @Controller and @ResponseBody.
		
		@RequestMapping:
		Use: Maps HTTP requests to handler methods. Used at both class and method levels.
		
		@GetMapping, @PostMapping, @PutMapping, @DeleteMapping:
		Use: Shortcut annotations for @RequestMapping with specific HTTP methods.
		
		@RequestParam:
		Use: Binds the value of a query parameter or form field to a method parameter.
		
		@PathVariable:
		Use: Extracts values from URI templates in @RequestMapping annotated methods.
		
		@RequestBody:
		Use: Binds the HTTP request body to a method parameter, indicating that the incoming data should be treated as the request body.3
		
		@ResponseStatus:
		Use: Sets the HTTP response status code for a handler method.
		
		@Entity:
		Use: Marks a class as a JPA entity, representing a table in a relational database.
		
		@Repository:
		Use: Indicates that the class is a Spring Data repository, responsible for database access.
		
		@Service:
		Use: Marks a class as a service component in the business layer.
		
		
		@Autowired:
		Use: Injects a bean by type. Can be used on fields, setter methods, and constructors.
		
		@Qualifier:
		Use: Specifies the bean name to be injected when multiple beans of the same type exist.
		
		@ComponentScan:
		Use: Enables the scanning of components (beans) within a specified package.
		
		@Configuration:
		Use: Indicates that a class declares one or more @Bean methods and may be processed by the Spring container.
		
		@EnableAutoConfiguration:
		Use: Enables Spring Boot's automatic configuration based on the project's dependencies.
		
		@Value:
		Use: Injects values from properties files or application configuration directly into fields.
		
		@ConditionalOnProperty:
		Use: Conditional activation of beans based on the presence or value of specified properties.
		
		@EnableJpaRepositories:
		Use: Enables Spring Data JPA repositories.
		
		@Transactional:
		Use: Defines the scope of a single database transaction.
		
		@EnableWebMvc:
		Use: Enables Spring MVC features when using a custom configuration.
		
		@EnableSwagger2:
		Use: Enables Swagger API documentation.

    9. Externalized Configuration:

	   application.properties or application.yml: Allows configuring the application without modifying code.
	   
    10. Spring Boot Testing:
      
	   Testing Support: Simplifies testing with annotations like @SpringBootTest.

    11. Spring Boot Production Deployment:
       
	   Packaging: Supports packaging the application as a JAR or WAR for deployment.

       Cloud Deployment: Integration with cloud platforms like AWS, Azure, and more.

  